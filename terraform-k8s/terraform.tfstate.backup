{
  "version": 4,
  "terraform_version": "1.10.5",
  "serial": 1237,
  "lineage": "bf8560af-bfb5-70f7-2cb8-05b8b85ba97c",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "cassandra",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "cassandra",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "cassandra",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "5.0.3",
                "chart": "cassandra",
                "first_deployed": 1741584247,
                "last_deployed": 1741584247,
                "name": "cassandra",
                "namespace": "streaming-pipeline",
                "notes": "CHART NAME: cassandra\nCHART VERSION: 12.1.3\nAPP VERSION: 5.0.3\n\nDid you know there are enterprise versions of the Bitnami catalog? For enhanced secure software supply chain features, unlimited pulls from Docker, LTS support, or application customization, see Bitnami Premium or Tanzu Application Catalog. See https://www.arrow.com/globalecs/na/vendors/bitnami for more information.** Please be patient while the chart is being deployed **\n\nCassandra can be accessed through the following URLs from within the cluster:\n\n  - CQL: cassandra.streaming-pipeline.svc.cluster.local:9042\n\nTo get your password run:\n\n   export CASSANDRA_PASSWORD=$(kubectl get secret --namespace \"streaming-pipeline\" cassandra-key -o jsonpath=\"{.data.cassandra-password}\" | base64 -d)\n\nCheck the cluster status by running:\n\n   kubectl exec -it --namespace streaming-pipeline $(kubectl get pods --namespace streaming-pipeline -l app.kubernetes.io/name=cassandra,app.kubernetes.io/instance=cassandra -o jsonpath='{.items[0].metadata.name}') nodetool status\n\nTo connect to your Cassandra cluster using CQL:\n\n1. Run a Cassandra pod that you can use as a client:\n\n   kubectl run --namespace streaming-pipeline cassandra-client --rm --tty -i --restart='Never' \\\n   --env CASSANDRA_PASSWORD=$CASSANDRA_PASSWORD \\\n    \\\n   --image docker.io/bitnami/cassandra:5.0.3-debian-12-r0 -- bash\n\n2. Connect using the cqlsh client:\n\n   cqlsh -u cassandra -p $CASSANDRA_PASSWORD cassandra\n\nTo connect to your database from outside the cluster execute the following commands:\n\n   kubectl port-forward --namespace streaming-pipeline svc/cassandra 9042:9042 \u0026\n   cqlsh -u cassandra -p $CASSANDRA_PASSWORD 127.0.0.1 9042\n\nWARNING: There are \"resources\" sections in the chart not set. Using \"resourcesPreset\" is not recommended for production. For production installations, please set the following values according to your workload needs:\n  - metrics.resources\n  - resources\n  - tls.resources\n+info https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\nWARNING: JVM Max Heap Size not set in value jvm.maxHeapSize. When not set, the chart will calculate the following size:\n     MIN(Memory Limit (if set) / 4, 1024M)\nWARNING: JVM New Heap Size not set in value jvm.newHeapSize. When not set, the chart will calculate the following size:\n     MAX(Memory Limit (if set) / 64, 256M)\n",
                "revision": 1,
                "values": "{\"dbUser\":{\"existingSecret\":\"cassandra-key\",\"forcePassword\":true},\"metrics\":{\"enabled\":true,\"serviceMonitor\":{\"enabled\":true}}}",
                "version": "12.1.3"
              }
            ],
            "name": "cassandra",
            "namespace": "streaming-pipeline",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "oci://registry-1.docker.io/bitnamicharts",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "upgrade_install": null,
            "values": [
              "metrics:\n  enabled: true\n  serviceMonitor:\n    enabled: true\n\ndbUser:\n  forcePassword: true\n  existingSecret: cassandra-key\n\n"
            ],
            "verify": false,
            "version": "12.1.3",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "kubernetes_namespace.pipeline_namespace",
            "kubernetes_secret.cassandra_key"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "kafka",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "kafka",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "kafka",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "3.9.0",
                "chart": "kafka",
                "first_deployed": 1741584246,
                "last_deployed": 1741584246,
                "name": "kafka",
                "namespace": "streaming-pipeline",
                "notes": "CHART NAME: kafka\nCHART VERSION: 31.3.1\nAPP VERSION: 3.9.0\n\nDid you know there are enterprise versions of the Bitnami catalog? For enhanced secure software supply chain features, unlimited pulls from Docker, LTS support, or application customization, see Bitnami Premium or Tanzu Application Catalog. See https://www.arrow.com/globalecs/na/vendors/bitnami for more information.\n---------------------------------------------------------------------------------------------\n WARNING\n\n    By specifying \"serviceType=LoadBalancer\" and not configuring the authentication\n    you have most likely exposed the Kafka service externally without any\n    authentication mechanism.\n\n    For security reasons, we strongly suggest that you switch to \"ClusterIP\" or\n    \"NodePort\". As alternative, you can also configure the Kafka authentication.\n\n---------------------------------------------------------------------------------------------\n\n** Please be patient while the chart is being deployed **\n\nKafka can be accessed by consumers via port 9092 on the following DNS name from within your cluster:\n\n    kafka.streaming-pipeline.svc.cluster.local\n\nEach Kafka broker can be accessed by producers via port 9092 on the following DNS name(s) from within your cluster:\n\n    kafka-controller-0.kafka-controller-headless.streaming-pipeline.svc.cluster.local:9092\n    kafka-broker-0.kafka-broker-headless.streaming-pipeline.svc.cluster.local:9092\n\nTo create a pod that you can use as a Kafka client run the following commands:\n\n    kubectl run kafka-client --restart='Never' --image docker.io/bitnami/kafka:3.9.0-debian-12-r6 --namespace streaming-pipeline --command -- sleep infinity\n    kubectl exec --tty -i kafka-client --namespace streaming-pipeline -- bash\n\n    PRODUCER:\n        kafka-console-producer.sh \\\n            --bootstrap-server kafka.streaming-pipeline.svc.cluster.local:9092 \\\n            --topic test\n\n    CONSUMER:\n        kafka-console-consumer.sh \\\n            --bootstrap-server kafka.streaming-pipeline.svc.cluster.local:9092 \\\n            --topic test \\\n            --from-beginning\nTo connect to your Kafka controller+broker nodes from outside the cluster, follow these instructions:\n    Kafka brokers domain: You can get the external node IP from the Kafka configuration file with the following commands (Check the EXTERNAL listener)\n\n        1. Obtain the pod name:\n\n        kubectl get pods --namespace streaming-pipeline -l \"app.kubernetes.io/name=kafka,app.kubernetes.io/instance=kafka,app.kubernetes.io/component=kafka\"\n\n        2. Obtain pod configuration:\n\n        kubectl exec -it KAFKA_POD -- cat /opt/bitnami/kafka/config/server.properties | grep advertised.listeners\n    Kafka brokers port: You will have a different node port for each Kafka broker. You can get the list of configured node ports using the command below:\n\n        echo \"$(kubectl get svc --namespace streaming-pipeline -l \"app.kubernetes.io/name=kafka,app.kubernetes.io/instance=kafka,app.kubernetes.io/component=kafka,pod\" -o jsonpath='{.items[*].spec.ports[0].nodePort}' | tr ' ' '\\n')\"\nTo connect to your Kafka broker nodes from outside the cluster, follow these instructions:\n    Kafka brokers domain: You can get the external node IP from the Kafka configuration file with the following commands (Check the EXTERNAL listener)\n\n        1. Obtain the pod name:\n\n        kubectl get pods --namespace streaming-pipeline -l \"app.kubernetes.io/name=kafka,app.kubernetes.io/instance=kafka,app.kubernetes.io/component=kafka\"\n\n        2. Obtain pod configuration:\n\n        kubectl exec -it KAFKA_POD -- cat /opt/bitnami/kafka/config/server.properties | grep advertised.listeners\n    Kafka brokers port: You will have a different node port for each Kafka broker. You can get the list of configured node ports using the command below:\n\n        echo \"$(kubectl get svc --namespace streaming-pipeline -l \"app.kubernetes.io/name=kafka,app.kubernetes.io/instance=kafka,app.kubernetes.io/component=kafka,pod\" -o jsonpath='{.items[*].spec.ports[0].nodePort}' | tr ' ' '\\n')\"\n\nWARNING: There are \"resources\" sections in the chart not set. Using \"resourcesPreset\" is not recommended for production. For production installations, please set the following values according to your workload needs:\n  - broker.resources\n  - controller.resources\n+info https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n",
                "revision": 1,
                "values": "{\"broker\":{\"automountServiceAccountToken\":true,\"replicaCount\":1},\"controller\":{\"automountServiceAccountToken\":true,\"replicaCount\":1},\"externalAccess\":{\"broker\":{\"service\":{\"externalIPs\":[\"192.168.49.2\"],\"nodePorts\":[\"31004\"],\"type\":\"NodePort\"}},\"controller\":{\"service\":{\"externalIPs\":[\"192.168.49.2\"],\"nodePorts\":[\"31001\"],\"type\":\"NodePort\"}},\"enabled\":true},\"listeners\":{\"advertisedListener\":\"EXTERNAL://192.168.49.2:31004\",\"client\":{\"protocol\":\"PLAINTEXT\"},\"controller\":{\"protocol\":\"PLAINTEXT\"},\"external\":{\"protocol\":\"PLAINTEXT\"}},\"rbac\":{\"create\":true},\"serviceAccount\":{\"create\":true},\"topic\":{\"autoCreate\":true}}",
                "version": "31.3.1"
              }
            ],
            "name": "kafka",
            "namespace": "streaming-pipeline",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "oci://registry-1.docker.io/bitnamicharts",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "upgrade_install": null,
            "values": [
              "controller:\r\n    replicaCount: 1\r\n    automountServiceAccountToken: true\r\n\r\nexternalAccess:\r\n    enabled: true\r\n    controller:\r\n        service:\r\n            type: NodePort\r\n            externalIPs:\r\n                - \"192.168.49.2\"\r\n            nodePorts:\r\n                - \"31001\"\r\n    broker:\r\n        service:\r\n            type: NodePort\r\n            externalIPs:\r\n                - \"192.168.49.2\"\r\n            nodePorts:\r\n                - \"31004\"\r\n\r\n\r\n\r\nserviceAccount:\r\n    create: true\r\n\r\nrbac:\r\n    create: true\r\n\r\nlisteners:\r\n    client:\r\n        protocol: PLAINTEXT\r\n    controller:\r\n        protocol: PLAINTEXT\r\n    external:\r\n        protocol: PLAINTEXT\r\n    advertisedListener:  \"EXTERNAL://192.168.49.2:31004\"\r\n\r\nbroker:\r\n    replicaCount: 1\r\n    automountServiceAccountToken: true\r\n\r\ntopic:\r\n    autoCreate: true\r\n"
            ],
            "verify": false,
            "version": "31.3.1",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "kubernetes_namespace.pipeline_namespace"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "spark",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "spark-operator",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "spark-operator",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "2.1.0",
                "chart": "spark-operator",
                "first_deployed": 1741584254,
                "last_deployed": 1741584254,
                "name": "spark-operator",
                "namespace": "spark-operator",
                "notes": "",
                "revision": 1,
                "values": "{\"spark\":{\"jobNamespaces\":[\"streaming-pipeline\"]},\"webhook\":{\"enable\":true,\"port\":443}}",
                "version": "2.1.0"
              }
            ],
            "name": "spark-operator",
            "namespace": "spark-operator",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://kubeflow.github.io/spark-operator",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [
              {
                "name": "spark.jobNamespaces",
                "type": "",
                "value": "{streaming-pipeline}"
              },
              {
                "name": "webhook.enable",
                "type": "",
                "value": "true"
              },
              {
                "name": "webhook.port",
                "type": "",
                "value": "443"
              }
            ],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "upgrade_install": null,
            "values": null,
            "verify": false,
            "version": "2.1.0",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "kubernetes_cluster_role_binding.spark_role",
            "kubernetes_namespace.pipeline_namespace",
            "kubernetes_namespace.spark_namespace",
            "kubernetes_service_account.spark_service_account"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "visual-data",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "kube-prometheus-stack",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "visual-data",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "v0.80.0",
                "chart": "kube-prometheus-stack",
                "first_deployed": 1741584354,
                "last_deployed": 1741584354,
                "name": "visual-data",
                "namespace": "streaming-pipeline",
                "notes": "1. Get your 'admin' user password by running:\n\n   kubectl get secret --namespace streaming-pipeline visual-data-grafana -o jsonpath=\"{.data.admin-password}\" | base64 --decode ; echo\n\n\n2. The Grafana server can be accessed via port 80 on the following DNS name from within your cluster:\n\n   visual-data-grafana.streaming-pipeline.svc.cluster.local\n\n   Get the Grafana URL to visit by running these commands in the same shell:\n     export POD_NAME=$(kubectl get pods --namespace streaming-pipeline -l \"app.kubernetes.io/name=grafana,app.kubernetes.io/instance=visual-data\" -o jsonpath=\"{.items[0].metadata.name}\")\n     kubectl --namespace streaming-pipeline port-forward $POD_NAME 3000\n\n3. Login with the password from step 1 and the username: admin\n#################################################################################\n######   WARNING: Persistence is disabled!!! You will lose your data when   #####\n######            the Grafana pod is terminated.                            #####\n#################################################################################\n\nkube-prometheus-stack has been installed. Check its status by running:\n  kubectl --namespace streaming-pipeline get pods -l \"release=visual-data\"\n\nGet Grafana 'admin' user password by running:\n\n  kubectl --namespace streaming-pipeline get secrets visual-data-grafana -o jsonpath=\"{.data.admin-password}\" | base64 -d ; echo\n\nAccess Grafana local instance:\n\n  export POD_NAME=$(kubectl --namespace streaming-pipeline get pod -l \"app.kubernetes.io/name=grafana,app.kubernetes.io/instance=visual-data\" -oname)\n  kubectl --namespace streaming-pipeline port-forward $POD_NAME 3000\n\nVisit https://github.com/prometheus-operator/kube-prometheus for instructions on how to create \u0026 configure Alertmanager and Prometheus instances using the Operator.\n\n1. Get the application URL by running these commands:\n  export POD_NAME=$(kubectl get pods --namespace streaming-pipeline -l \"app.kubernetes.io/name=prometheus-node-exporter,app.kubernetes.io/instance=visual-data\" -o jsonpath=\"{.items[0].metadata.name}\")\n  echo \"Visit http://127.0.0.1:9100 to use your application\"\n  kubectl port-forward --namespace streaming-pipeline $POD_NAME 9100\nkube-state-metrics is a simple service that listens to the Kubernetes API server and generates metrics about the state of the objects.\nThe exposed metrics can be found here:\nhttps://github.com/kubernetes/kube-state-metrics/blob/master/docs/README.md#exposed-metrics\n\nThe metrics are exported on the HTTP endpoint /metrics on the listening port.\nIn your case, visual-data-kube-state-metrics.streaming-pipeline.svc.cluster.local:8080/metrics\n\nThey are served either as plaintext or protobuf depending on the Accept header.\nThey are designed to be consumed either by Prometheus itself or by a scraper that is compatible with scraping a Prometheus client endpoint.\n",
                "revision": 1,
                "values": "{\"additionalPrometheusRulesMap\":{},\"alertmanager\":{\"alertmanagerSpec\":{\"additionalPeers\":[],\"affinity\":{},\"alertmanagerConfigMatcherStrategy\":{},\"alertmanagerConfigNamespaceSelector\":{},\"alertmanagerConfigSelector\":{},\"alertmanagerConfiguration\":{},\"clusterAdvertiseAddress\":false,\"clusterGossipInterval\":\"\",\"clusterPeerTimeout\":\"\",\"clusterPushpullInterval\":\"\",\"configMaps\":[],\"containers\":[],\"externalUrl\":null,\"forceEnableClusterMode\":false,\"image\":{\"registry\":\"quay.io\",\"repository\":\"prometheus/alertmanager\",\"sha\":\"\",\"tag\":\"v0.25.0\"},\"initContainers\":[],\"listenLocal\":false,\"logFormat\":\"logfmt\",\"logLevel\":\"info\",\"minReadySeconds\":0,\"nodeSelector\":{},\"paused\":false,\"podAntiAffinity\":\"\",\"podAntiAffinityTopologyKey\":\"kubernetes.io/hostname\",\"podMetadata\":{},\"portName\":\"web\",\"priorityClassName\":\"\",\"replicas\":1,\"resources\":{\"requests\":{\"memory\":\"400Mi\"}},\"retention\":\"120h\",\"routePrefix\":\"/\",\"scheme\":\"\",\"secrets\":[],\"securityContext\":{\"fsGroup\":2000,\"runAsGroup\":2000,\"runAsNonRoot\":true,\"runAsUser\":1000,\"seccompProfile\":{\"type\":\"RuntimeDefault\"}},\"storage\":{},\"tlsConfig\":{},\"tolerations\":[],\"topologySpreadConstraints\":[],\"useExistingSecret\":false,\"volumeMounts\":[],\"volumes\":[],\"web\":{}},\"annotations\":{},\"apiVersion\":\"v2\",\"config\":{\"global\":{\"resolve_timeout\":\"5m\"},\"inhibit_rules\":[{\"equal\":[\"namespace\",\"alertname\"],\"source_matchers\":[\"severity = critical\"],\"target_matchers\":[\"severity =~ warning|info\"]},{\"equal\":[\"namespace\",\"alertname\"],\"source_matchers\":[\"severity = warning\"],\"target_matchers\":[\"severity = info\"]},{\"equal\":[\"namespace\"],\"source_matchers\":[\"alertname = InfoInhibitor\"],\"target_matchers\":[\"severity = info\"]}],\"receivers\":[{\"name\":\"null\"}],\"route\":{\"group_by\":[\"namespace\"],\"group_interval\":\"5m\",\"group_wait\":\"30s\",\"receiver\":\"null\",\"repeat_interval\":\"12h\",\"routes\":[{\"matchers\":[\"alertname =~ \\\"InfoInhibitor|Watchdog\\\"\"],\"receiver\":\"null\"}]},\"templates\":[\"/etc/alertmanager/config/*.tmpl\"]},\"enabled\":true,\"extraSecret\":{\"annotations\":{},\"data\":{}},\"ingress\":{\"annotations\":{},\"enabled\":false,\"hosts\":[],\"labels\":{},\"paths\":[],\"tls\":[]},\"ingressPerReplica\":{\"annotations\":{},\"enabled\":false,\"hostDomain\":\"\",\"hostPrefix\":\"\",\"labels\":{},\"paths\":[],\"tlsSecretName\":\"\",\"tlsSecretPerReplica\":{\"enabled\":false,\"prefix\":\"alertmanager\"}},\"podDisruptionBudget\":{\"enabled\":false,\"maxUnavailable\":\"\",\"minAvailable\":1},\"secret\":{\"annotations\":{}},\"service\":{\"additionalPorts\":[],\"annotations\":{},\"clusterIP\":\"\",\"externalIPs\":[],\"externalTrafficPolicy\":\"Cluster\",\"labels\":{},\"loadBalancerIP\":\"\",\"loadBalancerSourceRanges\":[],\"nodePort\":30903,\"port\":9093,\"sessionAffinity\":\"\",\"targetPort\":9093,\"type\":\"ClusterIP\"},\"serviceAccount\":{\"annotations\":{},\"automountServiceAccountToken\":true,\"create\":true,\"name\":\"\"},\"serviceMonitor\":{\"additionalLabels\":{},\"bearerTokenFile\":null,\"enableHttp2\":true,\"interval\":\"\",\"labelLimit\":0,\"labelNameLengthLimit\":0,\"labelValueLengthLimit\":0,\"metricRelabelings\":[],\"proxyUrl\":\"\",\"relabelings\":[],\"sampleLimit\":0,\"scheme\":\"\",\"selfMonitor\":true,\"targetLimit\":0,\"tlsConfig\":{}},\"servicePerReplica\":{\"enabled\":false},\"stringConfig\":\"\",\"templateFiles\":{},\"tplConfig\":false},\"cleanPrometheusOperatorObjectNames\":false,\"commonLabels\":{},\"coreDns\":{\"enabled\":true,\"service\":{\"port\":9153,\"targetPort\":9153},\"serviceMonitor\":{\"additionalLabels\":{},\"interval\":\"\",\"labelLimit\":0,\"labelNameLengthLimit\":0,\"labelValueLengthLimit\":0,\"metricRelabelings\":[],\"proxyUrl\":\"\",\"relabelings\":[],\"sampleLimit\":0,\"targetLimit\":0}},\"defaultRules\":{\"additionalRuleAnnotations\":{},\"additionalRuleGroupAnnotations\":{\"alertmanager\":{},\"configReloaders\":{},\"etcd\":{},\"general\":{},\"k8s\":{},\"kubeApiserverAvailability\":{},\"kubeApiserverBurnrate\":{},\"kubeApiserverHistogram\":{},\"kubeApiserverSlos\":{},\"kubeControllerManager\":{},\"kubePrometheusGeneral\":{},\"kubePrometheusNodeRecording\":{},\"kubeProxy\":{},\"kubeSchedulerAlerting\":{},\"kubeSchedulerRecording\":{},\"kubeStateMetrics\":{},\"kubelet\":{},\"kubernetesApps\":{},\"kubernetesResources\":{},\"kubernetesStorage\":{},\"kubernetesSystem\":{},\"network\":{},\"node\":{},\"nodeExporterAlerting\":{},\"nodeExporterRecording\":{},\"prometheus\":{},\"prometheusOperator\":{}},\"additionalRuleGroupLabels\":{\"alertmanager\":{},\"configReloaders\":{},\"etcd\":{},\"general\":{},\"k8s\":{},\"kubeApiserverAvailability\":{},\"kubeApiserverBurnrate\":{},\"kubeApiserverHistogram\":{},\"kubeApiserverSlos\":{},\"kubeControllerManager\":{},\"kubePrometheusGeneral\":{},\"kubePrometheusNodeRecording\":{},\"kubeProxy\":{},\"kubeSchedulerAlerting\":{},\"kubeSchedulerRecording\":{},\"kubeStateMetrics\":{},\"kubelet\":{},\"kubernetesApps\":{},\"kubernetesResources\":{},\"kubernetesStorage\":{},\"kubernetesSystem\":{},\"network\":{},\"node\":{},\"nodeExporterAlerting\":{},\"nodeExporterRecording\":{},\"prometheus\":{},\"prometheusOperator\":{}},\"additionalRuleLabels\":{},\"annotations\":{},\"appNamespacesTarget\":\".*\",\"create\":true,\"disabled\":{},\"labels\":{},\"rules\":{\"alertmanager\":true,\"configReloaders\":true,\"etcd\":true,\"general\":true,\"k8s\":true,\"kubeApiserverAvailability\":true,\"kubeApiserverBurnrate\":true,\"kubeApiserverHistogram\":true,\"kubeApiserverSlos\":true,\"kubeControllerManager\":true,\"kubePrometheusGeneral\":true,\"kubePrometheusNodeRecording\":true,\"kubeProxy\":true,\"kubeSchedulerAlerting\":true,\"kubeSchedulerRecording\":true,\"kubeStateMetrics\":true,\"kubelet\":true,\"kubernetesApps\":true,\"kubernetesResources\":true,\"kubernetesStorage\":true,\"kubernetesSystem\":true,\"network\":true,\"node\":true,\"nodeExporterAlerting\":true,\"nodeExporterRecording\":true,\"prometheus\":true,\"prometheusOperator\":true},\"runbookUrl\":\"https://runbooks.prometheus-operator.dev/runbooks\"},\"extraManifests\":[],\"fullnameOverride\":\"\",\"global\":{\"imagePullSecrets\":[],\"imageRegistry\":\"\",\"rbac\":{\"create\":true,\"createAggregateClusterRoles\":false,\"pspAnnotations\":{},\"pspEnabled\":false}},\"grafana\":{\"additionalDataSources\":[{\"access\":\"proxy\",\"isDefault\":false,\"name\":\"Loki\",\"type\":\"loki\",\"url\":\"http://loki-loki-distributed-gateway.monitoring.svc.cluster.local\"}],\"adminPassword\":\"prom-operator\",\"defaultDashboardsEnabled\":true,\"defaultDashboardsTimezone\":\"utc\",\"deleteDatasources\":[],\"enabled\":true,\"extraConfigmapMounts\":[],\"forceDeployDashboards\":false,\"forceDeployDatasources\":false,\"ingress\":{\"annotations\":{},\"enabled\":false,\"hosts\":[],\"labels\":{},\"path\":\"/\",\"tls\":[]},\"namespaceOverride\":\"\",\"rbac\":{\"pspEnabled\":false},\"service\":{\"portName\":\"web\"},\"serviceMonitor\":{\"enabled\":true,\"interval\":\"\",\"labels\":{},\"path\":\"/metrics\",\"relabelings\":[],\"scheme\":\"http\",\"scrapeTimeout\":\"30s\",\"tlsConfig\":{}},\"sidecar\":{\"dashboards\":{\"annotations\":{},\"enabled\":true,\"label\":\"grafana_dashboard\",\"labelValue\":\"1\",\"multicluster\":{\"etcd\":{\"enabled\":false},\"global\":{\"enabled\":false}},\"provider\":{\"allowUiUpdates\":false},\"searchNamespace\":\"ALL\"},\"datasources\":{\"annotations\":{},\"createPrometheusReplicasDatasources\":false,\"defaultDatasourceEnabled\":true,\"enabled\":true,\"exemplarTraceIdDestinations\":{},\"httpMethod\":\"POST\",\"isDefaultDatasource\":true,\"label\":\"grafana_datasource\",\"labelValue\":\"1\",\"uid\":\"prometheus\"}}},\"kube-state-metrics\":{\"namespaceOverride\":\"\",\"prometheus\":{\"monitor\":{\"enabled\":true,\"honorLabels\":true,\"interval\":\"\",\"labelLimit\":0,\"labelNameLengthLimit\":0,\"labelValueLengthLimit\":0,\"metricRelabelings\":[],\"proxyUrl\":\"\",\"relabelings\":[],\"sampleLimit\":0,\"scrapeTimeout\":\"\",\"targetLimit\":0}},\"rbac\":{\"create\":true},\"releaseLabel\":true,\"selfMonitor\":{\"enabled\":false}},\"kubeApiServer\":{\"enabled\":true,\"serviceMonitor\":{\"additionalLabels\":{},\"interval\":\"\",\"jobLabel\":\"component\",\"labelLimit\":0,\"labelNameLengthLimit\":0,\"labelValueLengthLimit\":0,\"metricRelabelings\":[{\"action\":\"drop\",\"regex\":\"apiserver_request_duration_seconds_bucket;(0.15|0.2|0.3|0.35|0.4|0.45|0.6|0.7|0.8|0.9|1.25|1.5|1.75|2|3|3.5|4|4.5|6|7|8|9|15|25|40|50)\",\"sourceLabels\":[\"__name__\",\"le\"]}],\"proxyUrl\":\"\",\"relabelings\":[],\"sampleLimit\":0,\"selector\":{\"matchLabels\":{\"component\":\"apiserver\",\"provider\":\"kubernetes\"}},\"targetLimit\":0},\"tlsConfig\":{\"insecureSkipVerify\":false,\"serverName\":\"kubernetes\"}},\"kubeControllerManager\":{\"enabled\":true,\"endpoints\":[],\"service\":{\"enabled\":true,\"port\":null,\"targetPort\":null},\"serviceMonitor\":{\"additionalLabels\":{},\"enabled\":true,\"https\":null,\"insecureSkipVerify\":null,\"interval\":\"\",\"labelLimit\":0,\"labelNameLengthLimit\":0,\"labelValueLengthLimit\":0,\"metricRelabelings\":[],\"proxyUrl\":\"\",\"relabelings\":[],\"sampleLimit\":0,\"serverName\":null,\"targetLimit\":0}},\"kubeDns\":{\"enabled\":false,\"service\":{\"dnsmasq\":{\"port\":10054,\"targetPort\":10054},\"skydns\":{\"port\":10055,\"targetPort\":10055}},\"serviceMonitor\":{\"additionalLabels\":{},\"dnsmasqMetricRelabelings\":[],\"dnsmasqRelabelings\":[],\"interval\":\"\",\"labelLimit\":0,\"labelNameLengthLimit\":0,\"labelValueLengthLimit\":0,\"metricRelabelings\":[],\"proxyUrl\":\"\",\"relabelings\":[],\"sampleLimit\":0,\"targetLimit\":0}},\"kubeEtcd\":{\"enabled\":true,\"endpoints\":[],\"service\":{\"enabled\":true,\"port\":2381,\"targetPort\":2381},\"serviceMonitor\":{\"additionalLabels\":{},\"caFile\":\"\",\"certFile\":\"\",\"enabled\":true,\"insecureSkipVerify\":false,\"interval\":\"\",\"keyFile\":\"\",\"labelLimit\":0,\"labelNameLengthLimit\":0,\"labelValueLengthLimit\":0,\"metricRelabelings\":[],\"proxyUrl\":\"\",\"relabelings\":[],\"sampleLimit\":0,\"scheme\":\"http\",\"serverName\":\"\",\"targetLimit\":0}},\"kubeProxy\":{\"enabled\":true,\"endpoints\":[],\"service\":{\"enabled\":true,\"port\":10249,\"targetPort\":10249},\"serviceMonitor\":{\"additionalLabels\":{},\"enabled\":true,\"https\":false,\"interval\":\"\",\"labelLimit\":0,\"labelNameLengthLimit\":0,\"labelValueLengthLimit\":0,\"metricRelabelings\":[],\"proxyUrl\":\"\",\"relabelings\":[],\"sampleLimit\":0,\"targetLimit\":0}},\"kubeScheduler\":{\"enabled\":true,\"endpoints\":[],\"service\":{\"enabled\":true,\"port\":null,\"targetPort\":null},\"serviceMonitor\":{\"additionalLabels\":{},\"enabled\":true,\"https\":null,\"insecureSkipVerify\":null,\"interval\":\"\",\"labelLimit\":0,\"labelNameLengthLimit\":0,\"labelValueLengthLimit\":0,\"metricRelabelings\":[],\"proxyUrl\":\"\",\"relabelings\":[],\"sampleLimit\":0,\"serverName\":null,\"targetLimit\":0}},\"kubeStateMetrics\":{\"enabled\":true},\"kubeTargetVersionOverride\":\"\",\"kubeVersionOverride\":\"\",\"kubelet\":{\"enabled\":true,\"namespace\":\"kube-system\",\"serviceMonitor\":{\"additionalLabels\":{},\"cAdvisor\":true,\"cAdvisorMetricRelabelings\":[{\"action\":\"drop\",\"regex\":\"container_cpu_(cfs_throttled_seconds_total|load_average_10s|system_seconds_total|user_seconds_total)\",\"sourceLabels\":[\"__name__\"]},{\"action\":\"drop\",\"regex\":\"container_fs_(io_current|io_time_seconds_total|io_time_weighted_seconds_total|reads_merged_total|sector_reads_total|sector_writes_total|writes_merged_total)\",\"sourceLabels\":[\"__name__\"]},{\"action\":\"drop\",\"regex\":\"container_memory_(mapped_file|swap)\",\"sourceLabels\":[\"__name__\"]},{\"action\":\"drop\",\"regex\":\"container_(file_descriptors|tasks_state|threads_max)\",\"sourceLabels\":[\"__name__\"]},{\"action\":\"drop\",\"regex\":\"container_spec.*\",\"sourceLabels\":[\"__name__\"]},{\"action\":\"drop\",\"regex\":\".+;\",\"sourceLabels\":[\"id\",\"pod\"]}],\"cAdvisorRelabelings\":[{\"action\":\"replace\",\"sourceLabels\":[\"__metrics_path__\"],\"targetLabel\":\"metrics_path\"}],\"https\":true,\"interval\":\"\",\"labelLimit\":0,\"labelNameLengthLimit\":0,\"labelValueLengthLimit\":0,\"metricRelabelings\":[],\"probes\":true,\"probesMetricRelabelings\":[],\"probesRelabelings\":[{\"action\":\"replace\",\"sourceLabels\":[\"__metrics_path__\"],\"targetLabel\":\"metrics_path\"}],\"proxyUrl\":\"\",\"relabelings\":[{\"action\":\"replace\",\"sourceLabels\":[\"__metrics_path__\"],\"targetLabel\":\"metrics_path\"}],\"resource\":false,\"resourcePath\":\"/metrics/resource/v1alpha1\",\"resourceRelabelings\":[{\"action\":\"replace\",\"sourceLabels\":[\"__metrics_path__\"],\"targetLabel\":\"metrics_path\"}],\"sampleLimit\":0,\"targetLimit\":0}},\"kubernetesServiceMonitors\":{\"enabled\":true},\"nameOverride\":\"\",\"namespaceOverride\":\"\",\"nodeExporter\":{\"enabled\":true},\"prometheus\":{\"additionalPodMonitors\":[],\"additionalRulesForClusterRole\":[],\"additionalServiceMonitors\":[],\"annotations\":{},\"enabled\":true,\"ingressPerReplica\":{\"enabled\":false,\"tlsSecretPerReplica\":{\"enabled\":false,\"prefix\":\"prometheus\"}},\"networkPolicy\":{\"enabled\":\"failure-domain.beta.kubernetes.io/zone\",\"flavor\":\"kubernetes\"},\"podSecurityPolicy\":{\"allowedCapabilities\":[],\"allowedHostPaths\":[],\"volumes\":[]},\"prometheusSpec\":{\"additionalAlertManagerConfigs\":[],\"additionalAlertManagerConfigsSecret\":{},\"additionalAlertRelabelConfigs\":[],\"additionalAlertRelabelConfigsSecret\":{},\"additionalArgs\":[],\"additionalPrometheusSecretsAnnotations\":{},\"additionalRemoteRead\":[],\"additionalRemoteWrite\":[],\"additionalScrapeConfigs\":[],\"additionalScrapeConfigsSecret\":{},\"affinity\":{},\"alertingEndpoints\":[],\"allowOverlappingBlocks\":false,\"apiserverConfig\":{},\"arbitraryFSAccessThroughSMs\":false,\"configMaps\":[],\"containers\":[],\"disableCompaction\":false,\"enableAdminAPI\":false,\"enableFeatures\":[],\"enableRemoteWriteReceiver\":false,\"enforcedLabelLimit\":false,\"enforcedLabelNameLengthLimit\":false,\"enforcedLabelValueLengthLimit\":false,\"enforcedNamespaceLabel\":\"\",\"enforcedSampleLimit\":false,\"enforcedTargetLimit\":false,\"evaluationInterval\":\"\",\"excludedFromEnforcement\":[],\"exemplars\":\"\",\"externalLabels\":{},\"externalUrl\":\"\",\"hostAliases\":[],\"hostNetwork\":false,\"ignoreNamespaceSelectors\":false,\"image\":{\"registry\":\"quay.io\",\"repository\":\"prometheus/prometheus\",\"sha\":\"\",\"tag\":\"v2.44.0\"},\"initContainers\":[],\"listenLocal\":false,\"logFormat\":\"logfmt\",\"logLevel\":\"info\",\"minReadySeconds\":0,\"nodeSelector\":{},\"overrideHonorLabels\":false,\"overrideHonorTimestamps\":false,\"paused\":false,\"podAntiAffinity\":\"\",\"podAntiAffinityTopologyKey\":\"kubernetes.io/hostname\",\"podMetadata\":{},\"podMonitorNamespaceSelector\":{},\"podMonitorSelector\":{},\"podMonitorSelectorNilUsesHelmValues\":false,\"portName\":\"web\",\"priorityClassName\":\"\",\"probeNamespaceSelector\":{},\"probeSelector\":{},\"probeSelectorNilUsesHelmValues\":false,\"prometheusExternalLabelName\":\"\",\"prometheusExternalLabelNameClear\":false,\"prometheusRulesExcludedFromEnforce\":[],\"query\":{},\"queryLogFile\":false,\"remoteRead\":[],\"remoteWrite\":[],\"remoteWriteDashboards\":false,\"replicaExternalLabelName\":\"\",\"replicaExternalLabelNameClear\":false,\"replicas\":1,\"requests\":{\"memory\":\"400Mi\"},\"resources\":null,\"retention\":\"10d\",\"retentionSize\":\"\",\"routePrefix\":\"/\",\"ruleNamespaceSelector\":{},\"ruleSelector\":{},\"ruleSelectorNilUsesHelmValues\":false,\"scrapeConfigNamespaceSelector\":{},\"scrapeConfigSelector\":{},\"scrapeConfigSelectorNilUsesHelmValues\":false,\"scrapeInterval\":\"\",\"scrapeTimeout\":\"\",\"secrets\":[],\"securityContext\":{\"fsGroup\":2000,\"runAsGroup\":2000,\"runAsNonRoot\":true,\"runAsUser\":1000,\"seccompProfile\":{\"type\":\"RuntimeDefault\"}},\"serviceMonitorNamespaceSelector\":{},\"serviceMonitorSelector\":{},\"serviceMonitorSelectorNilUsesHelmValues\":false,\"shards\":1,\"storageSpec\":{},\"thanos\":{},\"tolerations\":[],\"topologySpreadConstraints\":[],\"tsdb\":{\"outOfOrderTimeWindow\":\"0s\"},\"version\":\"\",\"volumeMounts\":[],\"volumes\":[],\"walCompression\":true,\"web\":{}},\"service\":{\"additionalPorts\":[],\"annotations\":{},\"clusterIP\":\"\",\"externalIPs\":[],\"externalTrafficPolicy\":\"Cluster\",\"labels\":{},\"loadBalancerIP\":\"\",\"loadBalancerSourceRanges\":[],\"nodePort\":30090,\"port\":9090,\"publishNotReadyAddresses\":false,\"sessionAffinity\":\"\",\"targetPort\":9090,\"type\":\"ClusterIP\"},\"serviceAccount\":{\"annotations\":{},\"create\":true,\"name\":\"\"},\"serviceMonitor\":{\"additionalLabels\":{},\"bearerTokenFile\":null,\"interval\":\"\",\"labelLimit\":0,\"labelNameLengthLimit\":0,\"labelValueLengthLimit\":0,\"metricRelabelings\":[],\"relabelings\":[],\"sampleLimit\":0,\"scheme\":\"\",\"selfMonitor\":true,\"targetLimit\":0,\"tlsConfig\":{}},\"servicePerReplica\":{\"enabled\":false},\"thanosIngress\":{\"enabled\":false},\"thanosService\":{\"enabled\":false},\"thanosServiceExternal\":{\"enabled\":false},\"thanosServiceMonitor\":{\"enabled\":false}},\"prometheus-node-exporter\":{\"extraArgs\":[\"--collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)\",\"--collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$\"],\"namespaceOverride\":\"\",\"podLabels\":{\"jobLabel\":\"node-exporter\"},\"prometheus\":{\"monitor\":{\"enabled\":true,\"interval\":\"\",\"jobLabel\":\"jobLabel\",\"labelLimit\":0,\"labelNameLengthLimit\":0,\"labelValueLengthLimit\":0,\"metricRelabelings\":[],\"proxyUrl\":\"\",\"relabelings\":[],\"sampleLimit\":0,\"scrapeTimeout\":\"\",\"targetLimit\":0}},\"rbac\":{\"pspEnabled\":false},\"releaseLabel\":true,\"service\":{\"portName\":\"http-metrics\"}},\"prometheusOperator\":{\"admissionWebhooks\":{\"annotations\":{},\"caBundle\":\"\",\"certManager\":{\"admissionCert\":{\"duration\":\"\"},\"enabled\":false,\"rootCert\":{\"duration\":\"\"}},\"createSecretJob\":{\"securityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"readOnlyRootFilesystem\":true}},\"enabled\":true,\"failurePolicy\":\"\",\"patch\":{\"affinity\":{},\"annotations\":{},\"enabled\":true,\"image\":{\"pullPolicy\":\"IfNotPresent\",\"registry\":\"registry.k8s.io\",\"repository\":\"ingress-nginx/kube-webhook-certgen\",\"sha\":\"\",\"tag\":\"v20221220-controller-v1.5.1-58-g787ea74b6\"},\"nodeSelector\":{},\"podAnnotations\":{},\"priorityClassName\":\"\",\"resources\":{},\"securityContext\":{\"runAsGroup\":2000,\"runAsNonRoot\":true,\"runAsUser\":2000,\"seccompProfile\":{\"type\":\"RuntimeDefault\"}},\"tolerations\":[]},\"patchWebhookJob\":{\"securityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"readOnlyRootFilesystem\":true}},\"timeoutSeconds\":10},\"affinity\":{},\"alertmanagerConfigNamespaces\":[],\"alertmanagerInstanceNamespaces\":[],\"alertmanagerInstanceSelector\":\"\",\"annotations\":{},\"containerSecurityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"readOnlyRootFilesystem\":true},\"denyNamespaces\":[],\"dnsConfig\":{},\"enabled\":true,\"hostNetwork\":false,\"image\":{\"pullPolicy\":\"IfNotPresent\",\"registry\":\"quay.io\",\"repository\":\"prometheus-operator/prometheus-operator\",\"sha\":\"\",\"tag\":\"\"},\"kubeletService\":{\"enabled\":true,\"name\":\"\",\"namespace\":\"kube-system\"},\"labels\":{},\"namespaces\":{},\"networkPolicy\":{\"enabled\":false,\"flavor\":\"kubernetes\"},\"nodeSelector\":{},\"podAnnotations\":{},\"podLabels\":{},\"prometheusConfigReloader\":{\"enableProbe\":false,\"image\":{\"registry\":\"quay.io\",\"repository\":\"prometheus-operator/prometheus-config-reloader\",\"sha\":\"\",\"tag\":\"\"},\"resources\":{\"limits\":{\"cpu\":\"200m\",\"memory\":\"50Mi\"},\"requests\":{\"cpu\":\"200m\",\"memory\":\"50Mi\"}}},\"prometheusInstanceNamespaces\":[],\"prometheusInstanceSelector\":\"\",\"resources\":{\"limits\":{\"cpu\":\"200m\",\"memory\":\"200Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"100Mi\"}},\"secretFieldSelector\":\"type!=kubernetes.io/dockercfg,type!=kubernetes.io/service-account-token,type!=helm.sh/release.v1\",\"securityContext\":{\"fsGroup\":65534,\"runAsGroup\":65534,\"runAsNonRoot\":true,\"runAsUser\":65534,\"seccompProfile\":{\"type\":\"RuntimeDefault\"}},\"service\":{\"additionalPorts\":[],\"annotations\":{},\"clusterIP\":\"\",\"externalIPs\":[],\"externalTrafficPolicy\":\"Cluster\",\"labels\":{},\"loadBalancerIP\":\"\",\"loadBalancerSourceRanges\":[],\"nodePort\":30080,\"nodePortTls\":30443,\"type\":\"ClusterIP\"},\"serviceAccount\":{\"create\":true,\"name\":\"\"},\"serviceMonitor\":{\"additionalLabels\":{},\"interval\":\"\",\"labelLimit\":0,\"labelNameLengthLimit\":0,\"labelValueLengthLimit\":0,\"metricRelabelings\":[],\"relabelings\":[],\"sampleLimit\":0,\"scrapeTimeout\":\"\",\"selfMonitor\":true,\"targetLimit\":0},\"thanosImage\":{\"registry\":\"quay.io\",\"repository\":\"thanos/thanos\",\"sha\":\"\",\"tag\":\"v0.31.0\"},\"thanosRulerInstanceNamespaces\":[],\"thanosRulerInstanceSelector\":\"\",\"tls\":{\"enabled\":true,\"internalPort\":10250,\"tlsMinVersion\":\"VersionTLS13\"},\"tolerations\":[],\"verticalPodAutoscaler\":{\"controlledResources\":[],\"enabled\":false,\"maxAllowed\":{},\"minAllowed\":{},\"updatePolicy\":{\"updateMode\":\"Auto\"}}},\"thanosRuler\":{\"enabled\":false}}",
                "version": "69.2.0"
              }
            ],
            "name": "visual-data",
            "namespace": "streaming-pipeline",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://prometheus-community.github.io/helm-charts",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "upgrade_install": null,
            "values": [
              "nameOverride: \"\"\r\nnamespaceOverride: \"\"\r\nkubeTargetVersionOverride: \"\"\r\nkubeVersionOverride: \"\"\r\nfullnameOverride: \"\"\r\ncommonLabels: {}\r\n\r\ndefaultRules:\r\n  create: true\r\n  rules:\r\n    alertmanager: true\r\n    etcd: true\r\n    configReloaders: true\r\n    general: true\r\n    k8s: true\r\n    kubeApiserverAvailability: true\r\n    kubeApiserverBurnrate: true\r\n    kubeApiserverHistogram: true\r\n    kubeApiserverSlos: true\r\n    kubeControllerManager: true\r\n    kubelet: true\r\n    kubeProxy: true\r\n    kubePrometheusGeneral: true\r\n    kubePrometheusNodeRecording: true\r\n    kubernetesApps: true\r\n    kubernetesResources: true\r\n    kubernetesStorage: true\r\n    kubernetesSystem: true\r\n    kubeSchedulerAlerting: true\r\n    kubeSchedulerRecording: true\r\n    kubeStateMetrics: true\r\n    network: true\r\n    node: true\r\n    nodeExporterAlerting: true\r\n    nodeExporterRecording: true\r\n    prometheus: true\r\n    prometheusOperator: true\r\n  appNamespacesTarget: \".*\"\r\n  \r\n  labels: {}\r\n  annotations: {}\r\n  additionalRuleLabels: {}\r\n  additionalRuleAnnotations: {}\r\n  additionalRuleGroupLabels:\r\n    alertmanager: {}\r\n    etcd: {}\r\n    configReloaders: {}\r\n    general: {}\r\n    k8s: {}\r\n    kubeApiserverAvailability: {}\r\n    kubeApiserverBurnrate: {}\r\n    kubeApiserverHistogram: {}\r\n    kubeApiserverSlos: {}\r\n    kubeControllerManager: {}\r\n    kubelet: {}\r\n    kubeProxy: {}\r\n    kubePrometheusGeneral: {}\r\n    kubePrometheusNodeRecording: {}\r\n    kubernetesApps: {}\r\n    kubernetesResources: {}\r\n    kubernetesStorage: {}\r\n    kubernetesSystem: {}\r\n    kubeSchedulerAlerting: {}\r\n    kubeSchedulerRecording: {}\r\n    kubeStateMetrics: {}\r\n    network: {}\r\n    node: {}\r\n    nodeExporterAlerting: {}\r\n    nodeExporterRecording: {}\r\n    prometheus: {}\r\n    prometheusOperator: {}\r\n\r\n  ## Additional annotations for specific PrometheusRule alerts groups\r\n  additionalRuleGroupAnnotations:\r\n    alertmanager: {}\r\n    etcd: {}\r\n    configReloaders: {}\r\n    general: {}\r\n    k8s: {}\r\n    kubeApiserverAvailability: {}\r\n    kubeApiserverBurnrate: {}\r\n    kubeApiserverHistogram: {}\r\n    kubeApiserverSlos: {}\r\n    kubeControllerManager: {}\r\n    kubelet: {}\r\n    kubeProxy: {}\r\n    kubePrometheusGeneral: {}\r\n    kubePrometheusNodeRecording: {}\r\n    kubernetesApps: {}\r\n    kubernetesResources: {}\r\n    kubernetesStorage: {}\r\n    kubernetesSystem: {}\r\n    kubeSchedulerAlerting: {}\r\n    kubeSchedulerRecording: {}\r\n    kubeStateMetrics: {}\r\n    network: {}\r\n    node: {}\r\n    nodeExporterAlerting: {}\r\n    nodeExporterRecording: {}\r\n    prometheus: {}\r\n    prometheusOperator: {}\r\n  runbookUrl: \"https://runbooks.prometheus-operator.dev/runbooks\"\r\n  disabled: {}\r\nadditionalPrometheusRulesMap: {}\r\n\r\nglobal:\r\n  rbac:\r\n    create: true\r\n    createAggregateClusterRoles: false\r\n    pspEnabled: false\r\n    pspAnnotations: {}\r\n  imageRegistry: \"\"\r\n  imagePullSecrets: []\r\n\r\n##-alertmanager-##\r\nalertmanager:\r\n  enabled: true\r\n  annotations: {}\r\n  apiVersion: v2\r\n  serviceAccount:\r\n    create: true\r\n    name: \"\"\r\n    annotations: {}\r\n    automountServiceAccountToken: true\r\n  podDisruptionBudget:\r\n    enabled: false\r\n    minAvailable: 1\r\n    maxUnavailable: \"\"\r\n  config:\r\n    global:\r\n      resolve_timeout: 5m\r\n    inhibit_rules:\r\n      - source_matchers:\r\n          - 'severity = critical'\r\n        target_matchers:\r\n          - 'severity =~ warning|info'\r\n        equal:\r\n          - 'namespace'\r\n          - 'alertname'\r\n      - source_matchers:\r\n          - 'severity = warning'\r\n        target_matchers:\r\n          - 'severity = info'\r\n        equal:\r\n          - 'namespace'\r\n          - 'alertname'\r\n      - source_matchers:\r\n          - 'alertname = InfoInhibitor'\r\n        target_matchers:\r\n          - 'severity = info'\r\n        equal:\r\n          - 'namespace'\r\n    route:\r\n      group_by: ['namespace']\r\n      group_wait: 30s\r\n      group_interval: 5m\r\n      repeat_interval: 12h\r\n      receiver: 'null'\r\n      routes:\r\n      - receiver: 'null'\r\n        matchers:\r\n          - alertname =~ \"InfoInhibitor|Watchdog\"\r\n    receivers:\r\n    - name: 'null'\r\n    templates:\r\n    - '/etc/alertmanager/config/*.tmpl'\r\n  stringConfig: \"\"\r\n  tplConfig: false\r\n  templateFiles: {}\r\n  ingress:\r\n    enabled: false\r\n    annotations: {}\r\n    labels: {}\r\n    hosts: []\r\n    paths: []\r\n    # - /\r\n    tls: []\r\n  secret:\r\n    annotations: {}\r\n  ingressPerReplica:\r\n    enabled: false\r\n    annotations: {}\r\n    labels: {}\r\n    hostPrefix: \"\"\r\n    hostDomain: \"\"\r\n    paths: []\r\n    # - /\r\n    tlsSecretName: \"\"\r\n    tlsSecretPerReplica:\r\n      enabled: false\r\n      prefix: \"alertmanager\"\r\n\r\n  service:\r\n    annotations: {}\r\n    labels: {}\r\n    clusterIP: \"\"\r\n    port: 9093\r\n    targetPort: 9093\r\n    nodePort: 30903\r\n    additionalPorts: []\r\n    externalIPs: []\r\n    loadBalancerIP: \"\"\r\n    loadBalancerSourceRanges: []\r\n    externalTrafficPolicy: Cluster\r\n    sessionAffinity: \"\"\r\n    type: ClusterIP\r\n\r\n  servicePerReplica:\r\n    enabled: false\r\n\r\n  serviceMonitor:\r\n    interval: \"\"\r\n    selfMonitor: true\r\n    additionalLabels: {}\r\n    sampleLimit: 0\r\n    targetLimit: 0\r\n    labelLimit: 0\r\n    labelNameLengthLimit: 0\r\n    labelValueLengthLimit: 0\r\n    proxyUrl: \"\"\r\n    scheme: \"\"\r\n    enableHttp2: true\r\n    tlsConfig: {}\r\n    bearerTokenFile:\r\n    metricRelabelings: []\r\n    relabelings: []\r\n\r\n  alertmanagerSpec:\r\n    podMetadata: {}\r\n    image:\r\n      registry: quay.io\r\n      repository: prometheus/alertmanager\r\n      tag: v0.25.0\r\n      sha: \"\"\r\n    useExistingSecret: false\r\n    secrets: []\r\n    configMaps: []\r\n    web: {}\r\n    alertmanagerConfigSelector: {}\r\n    alertmanagerConfigNamespaceSelector: {}\r\n    alertmanagerConfiguration: {}\r\n    alertmanagerConfigMatcherStrategy: {}\r\n    logFormat: logfmt\r\n    logLevel: info\r\n    replicas: 1\r\n    retention: 120h\r\n    storage: {}\r\n    externalUrl:\r\n    routePrefix: /\r\n    scheme: \"\"\r\n    tlsConfig: {}\r\n    paused: false\r\n    nodeSelector: {}\r\n    resources: \r\n      requests:\r\n        memory: 400Mi\r\n    podAntiAffinity: \"\"\r\n    podAntiAffinityTopologyKey: kubernetes.io/hostname\r\n    affinity: {}\r\n    tolerations: []\r\n    topologySpreadConstraints: []\r\n    \r\n    securityContext:\r\n      runAsGroup: 2000\r\n      runAsNonRoot: true\r\n      runAsUser: 1000\r\n      fsGroup: 2000\r\n      seccompProfile:\r\n        type: RuntimeDefault\r\n    listenLocal: false\r\n    containers: []\r\n    volumes: []\r\n    volumeMounts: []\r\n    initContainers: []\r\n    priorityClassName: \"\"\r\n    additionalPeers: []\r\n    portName: \"web\"\r\n    clusterAdvertiseAddress: false\r\n    clusterGossipInterval: \"\"\r\n    clusterPeerTimeout: \"\"\r\n    clusterPushpullInterval: \"\"\r\n    forceEnableClusterMode: false\r\n    minReadySeconds: 0\r\n  extraSecret:\r\n    annotations: {}\r\n    data: {}\r\n\r\n##-grafana-##    \r\ngrafana:\r\n  enabled: true\r\n  namespaceOverride: \"\"\r\n  forceDeployDatasources: false\r\n  forceDeployDashboards: false\r\n  defaultDashboardsEnabled: true\r\n  defaultDashboardsTimezone: utc\r\n  adminPassword: prom-operator\r\n  rbac:\r\n    pspEnabled: false\r\n  ingress:\r\n    enabled: false\r\n    annotations: {}\r\n    labels: {}\r\n    hosts: []\r\n    path: /\r\n    tls: []\r\n\r\n  sidecar:\r\n    dashboards:\r\n      enabled: true\r\n      label: grafana_dashboard\r\n      labelValue: \"1\"\r\n      # Allow discovery in all namespaces for dashboards\r\n      searchNamespace: ALL\r\n      annotations: {}\r\n      multicluster:\r\n        global:\r\n          enabled: false\r\n        etcd:\r\n          enabled: false\r\n      provider:\r\n        allowUiUpdates: false\r\n    datasources:\r\n      enabled: true\r\n      defaultDatasourceEnabled: true\r\n      isDefaultDatasource: true\r\n      uid: prometheus\r\n      annotations: {}\r\n      httpMethod: POST\r\n      createPrometheusReplicasDatasources: false\r\n      label: grafana_datasource\r\n      labelValue: \"1\"\r\n      exemplarTraceIdDestinations: {}\r\n  extraConfigmapMounts: []\r\n  deleteDatasources: []\r\n  additionalDataSources: \r\n    - name: Loki\r\n      type: loki\r\n      url: http://loki-loki-distributed-gateway.monitoring.svc.cluster.local\r\n      access: proxy\r\n      isDefault: false\r\n  service:\r\n    portName: web\r\n\r\n  serviceMonitor:\r\n    enabled: true\r\n    path: \"/metrics\"\r\n    labels: {}\r\n    interval: \"\"\r\n    scheme: http\r\n    tlsConfig: {}\r\n    scrapeTimeout: 30s\r\n    relabelings: []\r\n\r\nkubernetesServiceMonitors:\r\n  enabled: true\r\nkubeApiServer:\r\n  enabled: true\r\n  tlsConfig:\r\n    serverName: kubernetes\r\n    insecureSkipVerify: false\r\n  serviceMonitor:\r\n    interval: \"\"\r\n    sampleLimit: 0\r\n    targetLimit: 0\r\n    labelLimit: 0\r\n    labelNameLengthLimit: 0\r\n    labelValueLengthLimit: 0\r\n    proxyUrl: \"\"\r\n    jobLabel: component\r\n    selector:\r\n      matchLabels:\r\n        component: apiserver\r\n        provider: kubernetes\r\n    metricRelabelings:\r\n      - action: drop\r\n        regex: apiserver_request_duration_seconds_bucket;(0.15|0.2|0.3|0.35|0.4|0.45|0.6|0.7|0.8|0.9|1.25|1.5|1.75|2|3|3.5|4|4.5|6|7|8|9|15|25|40|50)\r\n        sourceLabels:\r\n          - __name__\r\n          - le\r\n    relabelings: []\r\n    additionalLabels: {}\r\n\r\n\r\n## Component scraping the kubelet and kubelet-hosted cAdvisor\r\nkubelet:\r\n  enabled: true\r\n  namespace: kube-system\r\n  serviceMonitor:\r\n    interval: \"\"\r\n    sampleLimit: 0\r\n    targetLimit: 0\r\n    labelLimit: 0\r\n    labelNameLengthLimit: 0\r\n    labelValueLengthLimit: 0\r\n    proxyUrl: \"\"\r\n    https: true\r\n    cAdvisor: true\r\n    probes: true\r\n    resource: false\r\n    resourcePath: \"/metrics/resource/v1alpha1\"\r\n    cAdvisorMetricRelabelings:\r\n      # Drop less useful container CPU metrics.\r\n      - sourceLabels: [__name__]\r\n        action: drop\r\n        regex: 'container_cpu_(cfs_throttled_seconds_total|load_average_10s|system_seconds_total|user_seconds_total)'\r\n      # Drop less useful container / always zero filesystem metrics.\r\n      - sourceLabels: [__name__]\r\n        action: drop\r\n        regex: 'container_fs_(io_current|io_time_seconds_total|io_time_weighted_seconds_total|reads_merged_total|sector_reads_total|sector_writes_total|writes_merged_total)'\r\n      # Drop less useful / always zero container memory metrics.\r\n      - sourceLabels: [__name__]\r\n        action: drop\r\n        regex: 'container_memory_(mapped_file|swap)'\r\n      # Drop less useful container process metrics.\r\n      - sourceLabels: [__name__]\r\n        action: drop\r\n        regex: 'container_(file_descriptors|tasks_state|threads_max)'\r\n      # Drop container spec metrics that overlap with kube-state-metrics.\r\n      - sourceLabels: [__name__]\r\n        action: drop\r\n        regex: 'container_spec.*'\r\n      # Drop cgroup metrics with no pod.\r\n      - sourceLabels: [id, pod]\r\n        action: drop\r\n        regex: '.+;'\r\n\r\n    probesMetricRelabelings: []\r\n    cAdvisorRelabelings:\r\n      - action: replace\r\n        sourceLabels: [__metrics_path__]\r\n        targetLabel: metrics_path\r\n    probesRelabelings:\r\n      - action: replace\r\n        sourceLabels: [__metrics_path__]\r\n        targetLabel: metrics_path\r\n    resourceRelabelings:\r\n      - action: replace\r\n        sourceLabels: [__metrics_path__]\r\n        targetLabel: metrics_path\r\n    metricRelabelings: []\r\n    relabelings:\r\n      - action: replace\r\n        sourceLabels: [__metrics_path__]\r\n        targetLabel: metrics_path\r\n    additionalLabels: {}\r\n\r\n\r\n## Component scraping the kube controller manager\r\nkubeControllerManager:\r\n  enabled: true\r\n  endpoints: []\r\n  service:\r\n    enabled: true\r\n    port: null\r\n    targetPort: null\r\n  serviceMonitor:\r\n    enabled: true\r\n    interval: \"\"\r\n    sampleLimit: 0\r\n    targetLimit: 0\r\n    labelLimit: 0\r\n    labelNameLengthLimit: 0\r\n    labelValueLengthLimit: 0\r\n    proxyUrl: \"\"\r\n    https: null\r\n    insecureSkipVerify: null\r\n    serverName: null\r\n    metricRelabelings: []\r\n    relabelings: []\r\n    additionalLabels: {}\r\n\r\n\r\n## Component scraping coreDns. Use either this or kubeDns\r\ncoreDns:\r\n  enabled: true\r\n  service:\r\n    port: 9153\r\n    targetPort: 9153\r\n  serviceMonitor:\r\n    interval: \"\"\r\n    sampleLimit: 0\r\n    targetLimit: 0\r\n    labelLimit: 0\r\n    labelNameLengthLimit: 0\r\n    labelValueLengthLimit: 0\r\n    proxyUrl: \"\"\r\n    metricRelabelings: []\r\n    relabelings: []\r\n    additionalLabels: {}\r\n\r\n\r\n## Component scraping kubeDns. Use either this or coreDns\r\nkubeDns:\r\n  enabled: false\r\n  service:\r\n    dnsmasq:\r\n      port: 10054\r\n      targetPort: 10054\r\n    skydns:\r\n      port: 10055\r\n      targetPort: 10055\r\n\r\n  serviceMonitor:\r\n    interval: \"\"\r\n    sampleLimit: 0\r\n    targetLimit: 0\r\n    labelLimit: 0\r\n    labelNameLengthLimit: 0\r\n    labelValueLengthLimit: 0\r\n    proxyUrl: \"\"\r\n    metricRelabelings: []\r\n    relabelings: []\r\n    dnsmasqMetricRelabelings: []\r\n    dnsmasqRelabelings: []\r\n    additionalLabels: {}\r\n\r\n\r\n## Component scraping etcd\r\nkubeEtcd:\r\n  enabled: true\r\n  endpoints: []\r\n  service:\r\n    enabled: true\r\n    port: 2381\r\n    targetPort: 2381\r\n  serviceMonitor:\r\n    enabled: true\r\n    interval: \"\"\r\n    sampleLimit: 0\r\n    targetLimit: 0\r\n    labelLimit: 0\r\n    labelNameLengthLimit: 0\r\n    labelValueLengthLimit: 0\r\n    proxyUrl: \"\"\r\n    scheme: http\r\n    insecureSkipVerify: false\r\n    serverName: \"\"\r\n    caFile: \"\"\r\n    certFile: \"\"\r\n    keyFile: \"\"\r\n    metricRelabelings: []\r\n    relabelings: []\r\n    additionalLabels: {}\r\n\r\n\r\n## Component scraping kube scheduler\r\nkubeScheduler:\r\n  enabled: true\r\n  endpoints: []\r\n  service:\r\n    enabled: true\r\n    port: null\r\n    targetPort: null\r\n  serviceMonitor:\r\n    enabled: true\r\n    interval: \"\"\r\n    sampleLimit: 0\r\n    targetLimit: 0\r\n    labelLimit: 0\r\n    labelNameLengthLimit: 0\r\n    labelValueLengthLimit: 0\r\n    proxyUrl: \"\"\r\n    https: null\r\n    insecureSkipVerify: null\r\n    serverName: null\r\n    metricRelabelings: []\r\n    relabelings: []\r\n    additionalLabels: {}\r\n\r\n\r\n## Component scraping kube proxy\r\nkubeProxy:\r\n  enabled: true\r\n  endpoints: []\r\n  service:\r\n    enabled: true\r\n    port: 10249\r\n    targetPort: 10249\r\n  serviceMonitor:\r\n    enabled: true\r\n    interval: \"\"\r\n    sampleLimit: 0\r\n    targetLimit: 0\r\n    labelLimit: 0\r\n    labelNameLengthLimit: 0\r\n    labelValueLengthLimit: 0\r\n    proxyUrl: \"\"\r\n    https: false\r\n    metricRelabelings: []\r\n    relabelings: []\r\n    additionalLabels: {}\r\n\r\n\r\n## Component scraping kube state metrics\r\nkubeStateMetrics:\r\n  enabled: true\r\n\r\n## Configuration for kube-state-metrics subchart\r\nkube-state-metrics:\r\n  namespaceOverride: \"\"\r\n  rbac:\r\n    create: true\r\n  releaseLabel: true\r\n  prometheus:\r\n    monitor:\r\n      enabled: true\r\n      interval: \"\"\r\n      sampleLimit: 0\r\n      targetLimit: 0\r\n      labelLimit: 0\r\n      labelNameLengthLimit: 0\r\n      labelValueLengthLimit: 0\r\n      scrapeTimeout: \"\"\r\n      proxyUrl: \"\"\r\n      honorLabels: true\r\n      metricRelabelings: []\r\n      relabelings: []\r\n  selfMonitor:\r\n    enabled: false\r\n\r\n## Deploy node exporter as a daemonset to all nodes\r\nnodeExporter:\r\n  enabled: true\r\n\r\n## Configuration for prometheus-node-exporter subchart\r\nprometheus-node-exporter:\r\n  namespaceOverride: \"\"\r\n  podLabels:\r\n    jobLabel: node-exporter\r\n  releaseLabel: true\r\n  extraArgs:\r\n    - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)\r\n    - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$\r\n  service:\r\n    portName: http-metrics\r\n  prometheus:\r\n    monitor:\r\n      enabled: true\r\n      jobLabel: jobLabel\r\n      interval: \"\"\r\n      sampleLimit: 0\r\n      targetLimit: 0\r\n      labelLimit: 0\r\n      labelNameLengthLimit: 0\r\n      labelValueLengthLimit: 0\r\n      scrapeTimeout: \"\"\r\n      proxyUrl: \"\"\r\n      metricRelabelings: []\r\n      relabelings: []\r\n  rbac:\r\n    pspEnabled: false\r\n\r\n\r\n##-prometheusOperator-##\r\n## Manages Prometheus and Alertmanager components\r\nprometheusOperator:\r\n  enabled: true\r\n  tls:\r\n    enabled: true\r\n    tlsMinVersion: VersionTLS13\r\n    internalPort: 10250\r\n  admissionWebhooks:\r\n    failurePolicy: \"\"\r\n    timeoutSeconds: 10\r\n    enabled: true\r\n    caBundle: \"\"\r\n    annotations: {}\r\n    #   argocd.argoproj.io/hook: PreSync\r\n    #   argocd.argoproj.io/hook-delete-policy: HookSucceeded\r\n    patch:\r\n      enabled: true\r\n      image:\r\n        registry: registry.k8s.io\r\n        repository: ingress-nginx/kube-webhook-certgen\r\n        tag: v20221220-controller-v1.5.1-58-g787ea74b6\r\n        sha: \"\"\r\n        pullPolicy: IfNotPresent\r\n      resources: {}\r\n      priorityClassName: \"\"\r\n      annotations: {}\r\n      #   argocd.argoproj.io/hook: PreSync\r\n      #   argocd.argoproj.io/hook-delete-policy: HookSucceeded\r\n      podAnnotations: {}\r\n      nodeSelector: {}\r\n      affinity: {}\r\n      tolerations: []\r\n\r\n      securityContext:\r\n        runAsGroup: 2000\r\n        runAsNonRoot: true\r\n        runAsUser: 2000\r\n        seccompProfile:\r\n          type: RuntimeDefault\r\n\r\n    # Security context for create job container\r\n    createSecretJob:\r\n      securityContext:\r\n        allowPrivilegeEscalation: false\r\n        readOnlyRootFilesystem: true\r\n        capabilities:\r\n          drop:\r\n          - ALL\r\n\r\n      # Security context for patch job container\r\n    patchWebhookJob:\r\n      securityContext:\r\n        allowPrivilegeEscalation: false\r\n        readOnlyRootFilesystem: true\r\n        capabilities:\r\n          drop:\r\n          - ALL\r\n\r\n    # Use certmanager to generate webhook certs\r\n    certManager:\r\n      enabled: false\r\n      rootCert:\r\n        duration: \"\"  \r\n      admissionCert:\r\n        duration: \"\"  \r\n  namespaces: {}\r\n  denyNamespaces: []\r\n  alertmanagerInstanceNamespaces: []\r\n  alertmanagerConfigNamespaces: []\r\n  prometheusInstanceNamespaces: []\r\n  thanosRulerInstanceNamespaces: []\r\n\r\n\r\n  # clusterDomain: \"cluster.local\"\r\n  networkPolicy:\r\n    enabled: false\r\n    flavor: kubernetes\r\n  serviceAccount:\r\n    create: true\r\n    name: \"\"\r\n  service:\r\n    annotations: {}\r\n    labels: {}\r\n    clusterIP: \"\"\r\n    nodePort: 30080\r\n    nodePortTls: 30443\r\n    additionalPorts: []\r\n    loadBalancerIP: \"\"\r\n    loadBalancerSourceRanges: []\r\n    externalTrafficPolicy: Cluster\r\n    type: ClusterIP\r\n    externalIPs: []\r\n  labels: {}\r\n  annotations: {}\r\n  podLabels: {}\r\n  podAnnotations: {}\r\n  kubeletService:\r\n    enabled: true\r\n    namespace: kube-system\r\n    name: \"\"\r\n  serviceMonitor:\r\n    additionalLabels: {}\r\n    interval: \"\"\r\n    sampleLimit: 0\r\n    targetLimit: 0\r\n    labelLimit: 0\r\n    labelNameLengthLimit: 0\r\n    labelValueLengthLimit: 0\r\n    scrapeTimeout: \"\"\r\n    selfMonitor: true\r\n    metricRelabelings: []\r\n    relabelings: []\r\n  resources: \r\n    limits:\r\n      cpu: 200m\r\n      memory: 200Mi\r\n    requests:\r\n      cpu: 100m\r\n      memory: 100Mi\r\n\r\n  hostNetwork: false\r\n  nodeSelector: {}\r\n  tolerations: []\r\n  affinity: {}\r\n  dnsConfig: {}\r\n\r\n  securityContext:\r\n    fsGroup: 65534\r\n    runAsGroup: 65534\r\n    runAsNonRoot: true\r\n    runAsUser: 65534\r\n    seccompProfile:\r\n      type: RuntimeDefault\r\n\r\n  containerSecurityContext:\r\n    allowPrivilegeEscalation: false\r\n    readOnlyRootFilesystem: true\r\n    capabilities:\r\n      drop:\r\n      - ALL\r\n\r\n  # Enable vertical pod autoscaler support for prometheus-operator\r\n  verticalPodAutoscaler:\r\n    enabled: false\r\n    controlledResources: []\r\n    maxAllowed: {}\r\n    minAllowed: {}\r\n    updatePolicy:\r\n      updateMode: Auto\r\n\r\n  ## Prometheus-operator image\r\n  image:\r\n    registry: quay.io\r\n    repository: prometheus-operator/prometheus-operator\r\n    tag: \"\"\r\n    sha: \"\"\r\n    pullPolicy: IfNotPresent\r\n  prometheusConfigReloader:\r\n    image:\r\n      registry: quay.io\r\n      repository: prometheus-operator/prometheus-config-reloader\r\n      tag: \"\"\r\n      sha: \"\"\r\n    enableProbe: false\r\n    resources:\r\n      requests:\r\n        cpu: 200m\r\n        memory: 50Mi\r\n      limits:\r\n        cpu: 200m\r\n        memory: 50Mi\r\n\r\n  ## Thanos side-car image when configured\r\n  thanosImage:\r\n    registry: quay.io\r\n    repository: thanos/thanos\r\n    tag: v0.31.0\r\n    sha: \"\"\r\n  prometheusInstanceSelector: \"\"\r\n  alertmanagerInstanceSelector: \"\"\r\n  thanosRulerInstanceSelector: \"\"\r\n  secretFieldSelector: \"type!=kubernetes.io/dockercfg,type!=kubernetes.io/service-account-token,type!=helm.sh/release.v1\"\r\n\r\n##-Prometheus-##\r\nprometheus:\r\n  enabled: true\r\n  annotations: {}\r\n  networkPolicy:\r\n    enabled: failure-domain.beta.kubernetes.io/zone\r\n    flavor: kubernetes\r\n  serviceAccount:\r\n    create: true\r\n    name: \"\"\r\n    annotations: {}\r\n\r\n  thanosService:\r\n    enabled: false\r\n\r\n  thanosServiceMonitor:\r\n    enabled: false\r\n\r\n  thanosServiceExternal:\r\n    enabled: false\r\n\r\n  service:\r\n    annotations: {}\r\n    labels: {}\r\n    clusterIP: \"\"\r\n    port: 9090\r\n    targetPort: 9090\r\n    externalIPs: []\r\n    nodePort: 30090\r\n    loadBalancerIP: \"\"\r\n    loadBalancerSourceRanges: []\r\n    externalTrafficPolicy: Cluster\r\n    type: ClusterIP\r\n    additionalPorts: []\r\n    publishNotReadyAddresses: false\r\n    sessionAffinity: \"\"\r\n\r\n  servicePerReplica:\r\n    enabled: false\r\n\r\n  thanosIngress:\r\n    enabled: false\r\n\r\n  ingressPerReplica:\r\n    enabled: false\r\n\r\n    tlsSecretPerReplica:\r\n      enabled: false\r\n      prefix: \"prometheus\"\r\n  podSecurityPolicy:\r\n    allowedCapabilities: []\r\n    allowedHostPaths: []\r\n    volumes: []\r\n  serviceMonitor:\r\n    interval: \"\"\r\n    selfMonitor: true\r\n    additionalLabels: {}\r\n    sampleLimit: 0\r\n    targetLimit: 0\r\n    labelLimit: 0\r\n    labelNameLengthLimit: 0\r\n    labelValueLengthLimit: 0\r\n    scheme: \"\"\r\n    tlsConfig: {}\r\n    bearerTokenFile:\r\n    metricRelabelings: []\r\n    relabelings: []\r\n    \r\n  prometheusSpec:\r\n    disableCompaction: false\r\n    apiserverConfig: {}\r\n    additionalArgs: []\r\n    scrapeInterval: \"\"\r\n    scrapeTimeout: \"\"\r\n    evaluationInterval: \"\"\r\n    listenLocal: false\r\n    enableAdminAPI: false\r\n    version: \"\"\r\n    web: {}\r\n    exemplars: \"\"\r\n    enableFeatures: []\r\n    image:\r\n      registry: quay.io\r\n      repository: prometheus/prometheus\r\n      tag: v2.44.0\r\n      sha: \"\"\r\n    tolerations: []\r\n    topologySpreadConstraints: []\r\n    alertingEndpoints: []\r\n    externalLabels: {}\r\n    enableRemoteWriteReceiver: false\r\n    replicaExternalLabelName: \"\"\r\n    replicaExternalLabelNameClear: false\r\n    prometheusExternalLabelName: \"\"\r\n    prometheusExternalLabelNameClear: false\r\n    externalUrl: \"\"\r\n    nodeSelector: {}\r\n    secrets: []\r\n    configMaps: []\r\n    query: {}\r\n    ruleNamespaceSelector: {}\r\n\r\n    ruleSelectorNilUsesHelmValues: false\r\n    ruleSelector: {}\r\n    serviceMonitorSelectorNilUsesHelmValues: false\r\n    serviceMonitorSelector: {}\r\n    serviceMonitorNamespaceSelector: {}\r\n    podMonitorSelectorNilUsesHelmValues: false\r\n    podMonitorSelector: {}\r\n    podMonitorNamespaceSelector: {}\r\n    probeSelectorNilUsesHelmValues: false\r\n    probeSelector: {}\r\n    probeNamespaceSelector: {}\r\n    scrapeConfigSelectorNilUsesHelmValues: false\r\n    scrapeConfigSelector: {}\r\n    scrapeConfigNamespaceSelector: {}\r\n    \r\n    retention: 10d\r\n    retentionSize: \"\"\r\n    tsdb:\r\n      outOfOrderTimeWindow: 0s\r\n    walCompression: true\r\n    paused: false\r\n    replicas: 1\r\n    shards: 1\r\n    logLevel: info\r\n    logFormat: logfmt\r\n    routePrefix: /\r\n    podMetadata: {}\r\n    podAntiAffinity: \"\"\r\n    podAntiAffinityTopologyKey: kubernetes.io/hostname\r\n    affinity: {}\r\n    remoteRead: []\r\n    # - url: http://remote1/read\r\n    ## additionalRemoteRead is appended to remoteRead\r\n    additionalRemoteRead: []\r\n    remoteWrite: []\r\n    # - url: http://remote1/push\r\n    ## additionalRemoteWrite is appended to remoteWrite\r\n    additionalRemoteWrite: []\r\n    remoteWriteDashboards: false\r\n    resources: \r\n    requests:\r\n      memory: 400Mi\r\n    storageSpec: {}\r\n    volumes: []\r\n    volumeMounts: []\r\n\r\n    additionalScrapeConfigs: []\r\n    additionalScrapeConfigsSecret: {}\r\n    additionalPrometheusSecretsAnnotations: {}\r\n    additionalAlertManagerConfigs: []\r\n    additionalAlertManagerConfigsSecret: {}\r\n    additionalAlertRelabelConfigs: []\r\n    additionalAlertRelabelConfigsSecret: {}\r\n\r\n    securityContext:\r\n      runAsGroup: 2000\r\n      runAsNonRoot: true\r\n      runAsUser: 1000\r\n      fsGroup: 2000\r\n      seccompProfile:\r\n        type: RuntimeDefault\r\n    priorityClassName: \"\"\r\n    thanos: {}\r\n    containers: []\r\n    initContainers: []\r\n    portName: \"web\"\r\n    arbitraryFSAccessThroughSMs: false\r\n    overrideHonorLabels: false\r\n    overrideHonorTimestamps: false\r\n    ignoreNamespaceSelectors: false\r\n    enforcedNamespaceLabel: \"\"\r\n    prometheusRulesExcludedFromEnforce: []\r\n    excludedFromEnforcement: []\r\n    queryLogFile: false\r\n    enforcedSampleLimit: false\r\n    enforcedTargetLimit: false\r\n    enforcedLabelLimit: false\r\n    enforcedLabelNameLengthLimit: false\r\n    enforcedLabelValueLengthLimit: false\r\n    allowOverlappingBlocks: false\r\n    minReadySeconds: 0\r\n    hostNetwork: false\r\n    hostAliases: []\r\n  additionalRulesForClusterRole: []\r\n  additionalServiceMonitors: []\r\n  additionalPodMonitors: []\r\n  \r\nthanosRuler:\r\n  enabled: false\r\ncleanPrometheusOperatorObjectNames: false\r\nextraManifests: []"
            ],
            "verify": false,
            "version": "69.2.0",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "helm_release.cassandra",
            "kubernetes_namespace.pipeline_namespace",
            "kubernetes_secret.cassandra_key"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_cluster_role_binding",
      "name": "spark_role",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "spark-role",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 0,
                "labels": null,
                "name": "spark-role",
                "resource_version": "413989",
                "uid": "39d9732c-45bc-482c-9217-cf4944deab38"
              }
            ],
            "role_ref": [
              {
                "api_group": "rbac.authorization.k8s.io",
                "kind": "ClusterRole",
                "name": "edit"
              }
            ],
            "subject": [
              {
                "api_group": "",
                "kind": "ServiceAccount",
                "name": "spark",
                "namespace": "streaming-pipeline"
              }
            ]
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "kubernetes_namespace.pipeline_namespace",
            "kubernetes_namespace.spark_namespace",
            "kubernetes_service_account.spark_service_account"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_deployment",
      "name": "fake_transfer_money_api",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "streaming-pipeline/fake-transfer-money-api",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 1,
                "labels": {
                  "app": "fake-transfer-money-api"
                },
                "name": "fake-transfer-money-api",
                "namespace": "streaming-pipeline",
                "resource_version": "414018",
                "uid": "b707c155-5230-4958-85ff-2cc7cfd76082"
              }
            ],
            "spec": [
              {
                "min_ready_seconds": 0,
                "paused": false,
                "progress_deadline_seconds": 600,
                "replicas": "1",
                "revision_history_limit": 10,
                "selector": [
                  {
                    "match_expressions": [],
                    "match_labels": {
                      "app": "fake-transfer-money-api"
                    }
                  }
                ],
                "strategy": [
                  {
                    "rolling_update": [
                      {
                        "max_surge": "25%",
                        "max_unavailable": "25%"
                      }
                    ],
                    "type": "RollingUpdate"
                  }
                ],
                "template": [
                  {
                    "metadata": [
                      {
                        "annotations": null,
                        "generate_name": "",
                        "generation": 0,
                        "labels": {
                          "app": "fake-transfer-money-api"
                        },
                        "name": "",
                        "namespace": "",
                        "resource_version": "",
                        "uid": ""
                      }
                    ],
                    "spec": [
                      {
                        "active_deadline_seconds": 0,
                        "affinity": [],
                        "automount_service_account_token": true,
                        "container": [
                          {
                            "args": null,
                            "command": null,
                            "env": [],
                            "env_from": [],
                            "image": "grunklestan/fastapi_generate_data:latest",
                            "image_pull_policy": "Always",
                            "lifecycle": [],
                            "liveness_probe": [],
                            "name": "fake-transfer-money-api",
                            "port": [
                              {
                                "container_port": 5000,
                                "host_ip": "",
                                "host_port": 0,
                                "name": "",
                                "protocol": "TCP"
                              }
                            ],
                            "readiness_probe": [],
                            "resources": [
                              {
                                "limits": {},
                                "requests": {}
                              }
                            ],
                            "security_context": [],
                            "startup_probe": [],
                            "stdin": false,
                            "stdin_once": false,
                            "termination_message_path": "/dev/termination-log",
                            "termination_message_policy": "File",
                            "tty": false,
                            "volume_device": [],
                            "volume_mount": [],
                            "working_dir": ""
                          }
                        ],
                        "dns_config": [],
                        "dns_policy": "ClusterFirst",
                        "enable_service_links": true,
                        "host_aliases": [],
                        "host_ipc": false,
                        "host_network": false,
                        "host_pid": false,
                        "hostname": "",
                        "image_pull_secrets": [],
                        "init_container": [],
                        "node_name": "",
                        "node_selector": null,
                        "os": [],
                        "priority_class_name": "",
                        "readiness_gate": [],
                        "restart_policy": "Always",
                        "runtime_class_name": "",
                        "scheduler_name": "default-scheduler",
                        "security_context": [],
                        "service_account_name": "",
                        "share_process_namespace": false,
                        "subdomain": "",
                        "termination_grace_period_seconds": 30,
                        "toleration": [],
                        "topology_spread_constraint": [],
                        "volume": []
                      }
                    ]
                  }
                ]
              }
            ],
            "timeouts": null,
            "wait_for_rollout": true
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "kubernetes_namespace.pipeline_namespace"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_deployment",
      "name": "kafdrop",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "streaming-pipeline/kafdrop",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 1,
                "labels": {
                  "app": "kafdrop"
                },
                "name": "kafdrop",
                "namespace": "streaming-pipeline",
                "resource_version": "414408",
                "uid": "76900f56-198b-435a-b607-59ed4971c467"
              }
            ],
            "spec": [
              {
                "min_ready_seconds": 0,
                "paused": false,
                "progress_deadline_seconds": 600,
                "replicas": "1",
                "revision_history_limit": 10,
                "selector": [
                  {
                    "match_expressions": [],
                    "match_labels": {
                      "app": "kafdrop"
                    }
                  }
                ],
                "strategy": [
                  {
                    "rolling_update": [
                      {
                        "max_surge": "25%",
                        "max_unavailable": "25%"
                      }
                    ],
                    "type": "RollingUpdate"
                  }
                ],
                "template": [
                  {
                    "metadata": [
                      {
                        "annotations": null,
                        "generate_name": "",
                        "generation": 0,
                        "labels": {
                          "app": "kafdrop"
                        },
                        "name": "",
                        "namespace": "",
                        "resource_version": "",
                        "uid": ""
                      }
                    ],
                    "spec": [
                      {
                        "active_deadline_seconds": 0,
                        "affinity": [],
                        "automount_service_account_token": true,
                        "container": [
                          {
                            "args": null,
                            "command": null,
                            "env": [
                              {
                                "name": "KAFKA_BROKERCONNECT",
                                "value": "kafka:9092",
                                "value_from": []
                              }
                            ],
                            "env_from": [],
                            "image": "obsidiandynamics/kafdrop:latest",
                            "image_pull_policy": "Always",
                            "lifecycle": [],
                            "liveness_probe": [],
                            "name": "kafdrop",
                            "port": [
                              {
                                "container_port": 9000,
                                "host_ip": "",
                                "host_port": 0,
                                "name": "",
                                "protocol": "TCP"
                              }
                            ],
                            "readiness_probe": [],
                            "resources": [
                              {
                                "limits": {},
                                "requests": {}
                              }
                            ],
                            "security_context": [],
                            "startup_probe": [],
                            "stdin": false,
                            "stdin_once": false,
                            "termination_message_path": "/dev/termination-log",
                            "termination_message_policy": "File",
                            "tty": false,
                            "volume_device": [],
                            "volume_mount": [],
                            "working_dir": ""
                          }
                        ],
                        "dns_config": [],
                        "dns_policy": "ClusterFirst",
                        "enable_service_links": true,
                        "host_aliases": [],
                        "host_ipc": false,
                        "host_network": false,
                        "host_pid": false,
                        "hostname": "",
                        "image_pull_secrets": [],
                        "init_container": [],
                        "node_name": "",
                        "node_selector": null,
                        "os": [],
                        "priority_class_name": "",
                        "readiness_gate": [],
                        "restart_policy": "Always",
                        "runtime_class_name": "",
                        "scheduler_name": "default-scheduler",
                        "security_context": [],
                        "service_account_name": "",
                        "share_process_namespace": false,
                        "subdomain": "",
                        "termination_grace_period_seconds": 30,
                        "toleration": [],
                        "topology_spread_constraint": [],
                        "volume": []
                      }
                    ]
                  }
                ]
              }
            ],
            "timeouts": null,
            "wait_for_rollout": true
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "helm_release.kafka",
            "kubernetes_job.create_kafka_topic",
            "kubernetes_namespace.pipeline_namespace"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_deployment",
      "name": "money_transfer_producer",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "streaming-pipeline/money-transfer-producer",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 1,
                "labels": {
                  "app": "money-transfer-producer"
                },
                "name": "money-transfer-producer",
                "namespace": "streaming-pipeline",
                "resource_version": "414423",
                "uid": "ef40ad5d-6e7b-41f8-a7cc-794cb80cc35d"
              }
            ],
            "spec": [
              {
                "min_ready_seconds": 0,
                "paused": false,
                "progress_deadline_seconds": 600,
                "replicas": "1",
                "revision_history_limit": 10,
                "selector": [
                  {
                    "match_expressions": [],
                    "match_labels": {
                      "app": "money-transfer-producer"
                    }
                  }
                ],
                "strategy": [
                  {
                    "rolling_update": [
                      {
                        "max_surge": "25%",
                        "max_unavailable": "25%"
                      }
                    ],
                    "type": "RollingUpdate"
                  }
                ],
                "template": [
                  {
                    "metadata": [
                      {
                        "annotations": null,
                        "generate_name": "",
                        "generation": 0,
                        "labels": {
                          "app": "money-transfer-producer"
                        },
                        "name": "",
                        "namespace": "",
                        "resource_version": "",
                        "uid": ""
                      }
                    ],
                    "spec": [
                      {
                        "active_deadline_seconds": 0,
                        "affinity": [],
                        "automount_service_account_token": true,
                        "container": [
                          {
                            "args": null,
                            "command": null,
                            "env": [
                              {
                                "name": "KAFKA_BROKERCONNECT",
                                "value": "kafka:9092",
                                "value_from": []
                              },
                              {
                                "name": "SSE_API_URL",
                                "value": "http://fake-transfer-money-api:5000/transfer_data",
                                "value_from": []
                              }
                            ],
                            "env_from": [],
                            "image": "grunklestan/money_transfer_producer:latest",
                            "image_pull_policy": "Always",
                            "lifecycle": [],
                            "liveness_probe": [],
                            "name": "money-transfer-producer",
                            "port": [],
                            "readiness_probe": [],
                            "resources": [
                              {
                                "limits": {},
                                "requests": {}
                              }
                            ],
                            "security_context": [],
                            "startup_probe": [],
                            "stdin": false,
                            "stdin_once": false,
                            "termination_message_path": "/dev/termination-log",
                            "termination_message_policy": "File",
                            "tty": false,
                            "volume_device": [],
                            "volume_mount": [],
                            "working_dir": ""
                          }
                        ],
                        "dns_config": [],
                        "dns_policy": "ClusterFirst",
                        "enable_service_links": true,
                        "host_aliases": [],
                        "host_ipc": false,
                        "host_network": false,
                        "host_pid": false,
                        "hostname": "",
                        "image_pull_secrets": [],
                        "init_container": [],
                        "node_name": "",
                        "node_selector": null,
                        "os": [],
                        "priority_class_name": "",
                        "readiness_gate": [],
                        "restart_policy": "Always",
                        "runtime_class_name": "",
                        "scheduler_name": "default-scheduler",
                        "security_context": [],
                        "service_account_name": "",
                        "share_process_namespace": false,
                        "subdomain": "",
                        "termination_grace_period_seconds": 30,
                        "toleration": [],
                        "topology_spread_constraint": [],
                        "volume": []
                      }
                    ]
                  }
                ]
              }
            ],
            "timeouts": null,
            "wait_for_rollout": true
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "helm_release.kafka",
            "kubernetes_deployment.fake_transfer_money_api",
            "kubernetes_job.create_kafka_topic",
            "kubernetes_namespace.pipeline_namespace",
            "kubernetes_service.fake_transfer_money_api"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_job",
      "name": "cassandra_init",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "streaming-pipeline/cassandra-init",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 0,
                "labels": {},
                "name": "cassandra-init",
                "namespace": "streaming-pipeline",
                "resource_version": "",
                "uid": ""
              }
            ],
            "spec": [
              {
                "active_deadline_seconds": 0,
                "backoff_limit": 1,
                "backoff_limit_per_index": 0,
                "completion_mode": "",
                "completions": 1,
                "manual_selector": false,
                "max_failed_indexes": 0,
                "parallelism": 1,
                "pod_failure_policy": [],
                "selector": [],
                "template": [
                  {
                    "metadata": [
                      {
                        "annotations": null,
                        "generate_name": "",
                        "generation": 0,
                        "labels": null,
                        "name": "cassandra-init",
                        "resource_version": "",
                        "uid": ""
                      }
                    ],
                    "spec": [
                      {
                        "active_deadline_seconds": 0,
                        "affinity": [],
                        "automount_service_account_token": true,
                        "container": [
                          {
                            "args": null,
                            "command": [
                              "bash",
                              "-c",
                              "sleep 30; cqlsh -u cassandra -p thinh3010 cassandra-0.cassandra-headless.streaming-pipeline.svc.cluster.local -e \"CREATE KEYSPACE IF NOT EXISTS my_keyspace WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1}; USE my_keyspace; CREATE TABLE IF NOT EXISTS users ( id UUID PRIMARY KEY, name TEXT, email TEXT);\""
                            ],
                            "env": [],
                            "env_from": [],
                            "image": "docker.io/bitnami/cassandra:5.0.2-debian-12-r4",
                            "image_pull_policy": "",
                            "lifecycle": [],
                            "liveness_probe": [],
                            "name": "cassandra-client",
                            "port": [],
                            "readiness_probe": [],
                            "resources": [],
                            "security_context": [],
                            "startup_probe": [],
                            "stdin": false,
                            "stdin_once": false,
                            "termination_message_path": "/dev/termination-log",
                            "termination_message_policy": "",
                            "tty": false,
                            "volume_device": [],
                            "volume_mount": [],
                            "working_dir": ""
                          }
                        ],
                        "dns_config": [],
                        "dns_policy": "ClusterFirst",
                        "enable_service_links": true,
                        "host_aliases": [],
                        "host_ipc": false,
                        "host_network": false,
                        "host_pid": false,
                        "hostname": "",
                        "image_pull_secrets": [],
                        "init_container": [],
                        "node_name": "",
                        "node_selector": null,
                        "os": [],
                        "priority_class_name": "",
                        "readiness_gate": [],
                        "restart_policy": "Never",
                        "runtime_class_name": "",
                        "scheduler_name": "",
                        "security_context": [],
                        "service_account_name": "",
                        "share_process_namespace": false,
                        "subdomain": "",
                        "termination_grace_period_seconds": 30,
                        "toleration": [],
                        "topology_spread_constraint": [],
                        "volume": []
                      }
                    ]
                  }
                ],
                "ttl_seconds_after_finished": ""
              }
            ],
            "timeouts": null,
            "wait_for_completion": true
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMCwiZGVsZXRlIjo2MDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "helm_release.cassandra",
            "kubernetes_namespace.pipeline_namespace",
            "kubernetes_secret.cassandra_key"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_job",
      "name": "create_kafka_topic",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "default/create-kafka-topic-job",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 0,
                "labels": {},
                "name": "create-kafka-topic-job",
                "namespace": "default",
                "resource_version": "",
                "uid": ""
              }
            ],
            "spec": [
              {
                "active_deadline_seconds": 0,
                "backoff_limit": 2,
                "backoff_limit_per_index": 0,
                "completion_mode": "",
                "completions": 1,
                "manual_selector": false,
                "max_failed_indexes": 0,
                "parallelism": 1,
                "pod_failure_policy": [],
                "selector": [],
                "template": [
                  {
                    "metadata": [
                      {
                        "annotations": null,
                        "generate_name": "",
                        "generation": 0,
                        "labels": {
                          "app": "kafka-topic-creator"
                        },
                        "name": "",
                        "resource_version": "",
                        "uid": ""
                      }
                    ],
                    "spec": [
                      {
                        "active_deadline_seconds": 0,
                        "affinity": [],
                        "automount_service_account_token": true,
                        "container": [
                          {
                            "args": null,
                            "command": [
                              "/bin/sh",
                              "-c",
                              "kafka-topics.sh --create --topic money_transfer --bootstrap-server 192.168.49.2:31004 --partitions 3 --replication-factor 1"
                            ],
                            "env": [],
                            "env_from": [],
                            "image": "bitnami/kafka:latest",
                            "image_pull_policy": "",
                            "lifecycle": [],
                            "liveness_probe": [],
                            "name": "kafka-client",
                            "port": [],
                            "readiness_probe": [],
                            "resources": [],
                            "security_context": [],
                            "startup_probe": [],
                            "stdin": false,
                            "stdin_once": false,
                            "termination_message_path": "/dev/termination-log",
                            "termination_message_policy": "",
                            "tty": false,
                            "volume_device": [],
                            "volume_mount": [],
                            "working_dir": ""
                          }
                        ],
                        "dns_config": [],
                        "dns_policy": "ClusterFirst",
                        "enable_service_links": true,
                        "host_aliases": [],
                        "host_ipc": false,
                        "host_network": false,
                        "host_pid": false,
                        "hostname": "",
                        "image_pull_secrets": [],
                        "init_container": [],
                        "node_name": "",
                        "node_selector": null,
                        "os": [],
                        "priority_class_name": "",
                        "readiness_gate": [],
                        "restart_policy": "Never",
                        "runtime_class_name": "",
                        "scheduler_name": "",
                        "security_context": [],
                        "service_account_name": "",
                        "share_process_namespace": false,
                        "subdomain": "",
                        "termination_grace_period_seconds": 30,
                        "toleration": [],
                        "topology_spread_constraint": [],
                        "volume": []
                      }
                    ]
                  }
                ],
                "ttl_seconds_after_finished": ""
              }
            ],
            "timeouts": null,
            "wait_for_completion": true
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMCwiZGVsZXRlIjo2MDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "helm_release.kafka",
            "kubernetes_namespace.pipeline_namespace"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_namespace",
      "name": "pipeline_namespace",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "streaming-pipeline",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 0,
                "labels": null,
                "name": "streaming-pipeline",
                "resource_version": "413981",
                "uid": "d6d2c13a-33eb-4ab7-a2e7-e35c1846d257"
              }
            ],
            "timeouts": null,
            "wait_for_default_service_account": false
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjozMDAwMDAwMDAwMDB9fQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_namespace",
      "name": "spark_namespace",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "spark-operator",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 0,
                "labels": null,
                "name": "spark-operator",
                "resource_version": "413980",
                "uid": "0c716761-1570-450b-97b4-5089e3ab29a0"
              }
            ],
            "timeouts": null,
            "wait_for_default_service_account": false
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjozMDAwMDAwMDAwMDB9fQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_network_policy",
      "name": "pipeline_network",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "streaming-pipeline/pipeline-network",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 1,
                "labels": null,
                "name": "pipeline-network",
                "namespace": "streaming-pipeline",
                "resource_version": "413988",
                "uid": "16bcbaae-7ee8-46dd-84b1-8a0196ccac6f"
              }
            ],
            "spec": [
              {
                "egress": [],
                "ingress": [
                  {
                    "from": [
                      {
                        "ip_block": [],
                        "namespace_selector": [],
                        "pod_selector": [
                          {
                            "match_expressions": [],
                            "match_labels": {
                              "k8s.network/pipeline-network": "true"
                            }
                          }
                        ]
                      }
                    ],
                    "ports": []
                  }
                ],
                "pod_selector": [
                  {
                    "match_expressions": [],
                    "match_labels": {
                      "k8s.network/pipeline-network": "true"
                    }
                  }
                ],
                "policy_types": [
                  "Ingress"
                ]
              }
            ]
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "kubernetes_namespace.pipeline_namespace"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_secret",
      "name": "cassandra_key",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "binary_data": null,
            "data": {
              "cassandra-password": "thinh3010"
            },
            "id": "streaming-pipeline/cassandra-key",
            "immutable": false,
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 0,
                "labels": null,
                "name": "cassandra-key",
                "namespace": "streaming-pipeline",
                "resource_version": "413986",
                "uid": "537e3d7a-b4cc-4540-99e1-7a5fea8d59c6"
              }
            ],
            "timeouts": null,
            "type": "Opaque",
            "wait_for_service_account_token": true
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "data"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "binary_data"
              }
            ]
          ],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMH19",
          "dependencies": [
            "kubernetes_namespace.pipeline_namespace"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_service",
      "name": "fake_transfer_money_api",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "streaming-pipeline/fake-transfer-money-api",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 0,
                "labels": {
                  "app": "fake-transfer-money-api"
                },
                "name": "fake-transfer-money-api",
                "namespace": "streaming-pipeline",
                "resource_version": "414103",
                "uid": "ceb997db-d9ea-4040-9744-dff3134852ab"
              }
            ],
            "spec": [
              {
                "allocate_load_balancer_node_ports": true,
                "cluster_ip": "10.99.165.202",
                "cluster_ips": [
                  "10.99.165.202"
                ],
                "external_ips": null,
                "external_name": "",
                "external_traffic_policy": "Cluster",
                "health_check_node_port": 0,
                "internal_traffic_policy": "Cluster",
                "ip_families": [
                  "IPv4"
                ],
                "ip_family_policy": "SingleStack",
                "load_balancer_class": "",
                "load_balancer_ip": "",
                "load_balancer_source_ranges": null,
                "port": [
                  {
                    "app_protocol": "",
                    "name": "fake-transfer-money-api",
                    "node_port": 30080,
                    "port": 5000,
                    "protocol": "TCP",
                    "target_port": "5000"
                  }
                ],
                "publish_not_ready_addresses": false,
                "selector": {
                  "app": "fake-transfer-money-api"
                },
                "session_affinity": "None",
                "session_affinity_config": [],
                "type": "NodePort"
              }
            ],
            "status": [
              {
                "load_balancer": [
                  {
                    "ingress": []
                  }
                ]
              }
            ],
            "timeouts": null,
            "wait_for_load_balancer": true
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "kubernetes_deployment.fake_transfer_money_api",
            "kubernetes_namespace.pipeline_namespace"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_service",
      "name": "kafdrop",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "streaming-pipeline/kafdrop",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 0,
                "labels": {
                  "name": "kafdrop"
                },
                "name": "kafdrop",
                "namespace": "streaming-pipeline",
                "resource_version": "414413",
                "uid": "ef567fa0-6237-4ec6-a443-5ff1c5d5f9b6"
              }
            ],
            "spec": [
              {
                "allocate_load_balancer_node_ports": true,
                "cluster_ip": "10.104.146.111",
                "cluster_ips": [
                  "10.104.146.111"
                ],
                "external_ips": null,
                "external_name": "",
                "external_traffic_policy": "Cluster",
                "health_check_node_port": 0,
                "internal_traffic_policy": "Cluster",
                "ip_families": [
                  "IPv4"
                ],
                "ip_family_policy": "SingleStack",
                "load_balancer_class": "",
                "load_balancer_ip": "",
                "load_balancer_source_ranges": null,
                "port": [
                  {
                    "app_protocol": "",
                    "name": "kafdrop",
                    "node_port": 30090,
                    "port": 9000,
                    "protocol": "TCP",
                    "target_port": "9000"
                  }
                ],
                "publish_not_ready_addresses": false,
                "selector": {
                  "app": "kafdrop"
                },
                "session_affinity": "None",
                "session_affinity_config": [],
                "type": "NodePort"
              }
            ],
            "status": [
              {
                "load_balancer": [
                  {
                    "ingress": []
                  }
                ]
              }
            ],
            "timeouts": null,
            "wait_for_load_balancer": true
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "helm_release.kafka",
            "kubernetes_deployment.kafdrop",
            "kubernetes_job.create_kafka_topic",
            "kubernetes_namespace.pipeline_namespace"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_service_account",
      "name": "spark_service_account",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "automount_service_account_token": true,
            "default_secret_name": "",
            "id": "streaming-pipeline/spark",
            "image_pull_secret": [],
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 0,
                "labels": null,
                "name": "spark",
                "namespace": "streaming-pipeline",
                "resource_version": "413987",
                "uid": "23545a7e-5e18-40e5-9cbc-7615b3c3fbe4"
              }
            ],
            "secret": [],
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMH19",
          "dependencies": [
            "kubernetes_namespace.pipeline_namespace",
            "kubernetes_namespace.spark_namespace"
          ]
        }
      ]
    }
  ],
  "check_results": null
}
